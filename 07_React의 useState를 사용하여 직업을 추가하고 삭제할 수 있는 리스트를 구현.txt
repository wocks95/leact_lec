function EventFuncComp2() { // React 함수형 컴포넌트, return 문을 통해 JSX를 반환합니다.
      function onSubmitHandler(e) { // onSubmitHandler는 폼 제출 이벤트(submit event)를 처리하는 함수입니다.
  
        if(document.getElementById('a').value === '') {
          e.preventDefault(); // 기본 제출 동작 취소 
          alert('서브밋이 취소되었습니다.');   
        }     
      }
      return (
        <>
          <h1>이벤트 핸들링5</h1>
          <form onSubmit={onSubmitHandler}>
            <input type="text" id="a"/>
            <br/>
            <button type="submit" >제출</button>
          </form>
        </>
      )

    }


<!-- 3. 여러 컴포넌트 중 key 속성을 활용해 특정 컴포넌트 추출하기 -->
  <div id="root3"></div>
  <script type="text/babel">

    // <li> 엘리멘트를 반환하는 LiComp 컴포넌트
   5.function LiComp({name}) {
   6.  return <li>{name}</li>
    }

    // LiComp 컴포넌트를 여러 개 생성하는 UlComp 컴포넌트
   3.function UlComp({names}) {
      return (
        <ul>
   4.     { names.map((name, index) => <LiComp key={index} name={name}/>)}

        </ul>
      )
    }

    // UlComp 컴포넌트에 배열 전달하기 (LiComp 컴포넌트 제작에 필요한 배열)
    1. const names = ['alice', 'john', 'tommy', 'jessica', 'ralph'];
    2. ReactDOM.createRoot(document.getElementById('root3')).render(<UlComp names={names}/>)

  </script>


-React의 useState를 사용하여 직업을 추가하고 삭제할 수 있는 리스트를 구현한 것

<div id="root4"></div>
  <script type="text/babel">
    function JobComp() {
      // state를 객체 배열로 생성
      const {useState} = React;
      const [jobs(직업을 저장하는 배열상태), setJobs(jobs를 업데이트하는 함수)] = useState([
        {id: 1, job: '개발자'}, << 초기값
        {id: 2, job: '변호사'}  << 초기값
      ]);
  
      // id가 사용하는 state, 새롭게 추가될 직업의 ID를 관리
      const [ id, setId ] = useState(jobs.length + 1); // jobs.length + 1을 초기값으로 설정하여 새로운 직업이 추가될 때마다 증가
  
      // job이 사용하는 state
      const [jobname, setJobname] =useState('');
  
      // 입력된 직업이 state job 에 저장되는 이벤트 핸들러
      const onChangeHandler = (e) => {
        setJobname(e.target.value)
      }

      // Add 버튼을 클릭하면 동작하는 이벤트 핸들러
      const onClickHandler = () => {
          const newJob =  {
            id: id, // state id 의 초기값
            job: jobname
          
        }
        // 새로운 jobs 등록 후 다음에 등록할 job의 id와 job 초기화
       setJobs(jobs.concat(newJob)); // state에 추가할려면 set이 필요함
       setId(id + 1); // 추가 이후 다시 초기화
       setJobname('');
      }

      // 전달된 job의 id를 가진 직업을 삭제하는 함수
      function removeJob(id) {
        setJobs( jobs.filter(job => job.id !== id)); // setJobs( jobs.filter(job => {return job.id !== id }));
      }

      //return
      return (
        <>
          <input type="text" placeholder="직업 입력" value={jobname} onChange={onChangeHandler}/>
          <button type="button" onClick={onClickHandler}>Add</button>
          <ul>
            {jobs.map(job => <li key={job.id} onDoubleClick={() => {removeJob(job.id)}}>{job.job}</li>)}
          </ul>
        </>
      )

    }

    ReactDOM.createRoot(document.getElementById('root4')).render(<JobComp/>)
  </script>
